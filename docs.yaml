openapi: 3.0.3
info:
  title: 'URL Library'
  version: 1.0.0
paths:
  /api/v1/collections/:
    get:
      operationId: api_v1_collections_list
      tags:
      - api
      summary: "Get your collections"
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Collection'
          description: ''
    post:
      operationId: api_v1_collections_create
      tags:
      - api
      summary: "Create new collection"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Collection'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Collection'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: ''
  /api/v1/collections/{id}/:
    get:
      operationId: api_v1_collections_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this collection.
        required: true
      tags:
      - api
      summary: "Get defined collection"
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: ''
    put:
      operationId: api_v1_collections_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this collection.
        required: true
      tags:
      - api
      summary: "Update defined collection"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Collection'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Collection'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Collection'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: ''
    patch:
      operationId: api_v1_collections_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this collection.
        required: true
      tags:
      - api
      summary: "Update defined collection"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCollection'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCollection'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCollection'
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
          description: ''
    delete:
      operationId: api_v1_collections_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this collection.
        required: true
      tags:
      - api
      summary: "Delete defined collection"
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/urls/:
    get:
      operationId: api_v1_urls_list
      tags:
      - api
      summary: "Get your urls"
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Url'
          description: ''
    post:
      operationId: api_v1_urls_create
      tags:
      - api
      summary: "Create new url"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Url'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Url'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Url'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Url'
          description: ''
  /api/v1/urls/{id}/:
    get:
      operationId: api_v1_urls_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this url.
        required: true
      tags:
      - api
      summary: "Get defined url"
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Url'
          description: ''
    put:
      operationId: api_v1_urls_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this url.
        required: true
      tags:
      - api
      summary: "Update defined url"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Url'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Url'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Url'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Url'
          description: ''
    patch:
      operationId: api_v1_urls_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this url.
        required: true
      tags:
      - api
      summary: "Update defined url"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUrl'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUrl'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUrl'
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Url'
          description: ''
    delete:
      operationId: api_v1_urls_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this url.
        required: true
      tags:
      - api
      summary: "Delete defined url"
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /auth/token/login/:
    post:
      operationId: auth_token_login_create
      description: Use this endpoint to obtain user authentication token.
      tags:
      - auth
      summary: "Login"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenCreate'
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenCreate'
          description: ''
  /auth/token/logout/:
    post:
      operationId: auth_token_logout_create
      description: Use this endpoint to logout user (remove user authentication token).
      tags:
      - auth
      summary: "Logout"
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /auth/users/:
    post:
      operationId: auth_users_create
      tags:
      - auth
      summary: "Create user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
  /auth/users/me/:
    get:
      operationId: auth_users_me_retrieve
      tags:
      - auth
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: auth_users_me_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: auth_users_me_partial_update
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: auth_users_me_destroy
      tags:
      - auth
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  
  /auth/users/reset_password/:
    post:
      operationId: auth_users_reset_password_create
      tags:
      - auth
      summary: "Request password reset"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /auth/users/reset_password_confirm/:
    post:
      operationId: auth_users_reset_password_confirm_create
      tags:
      - auth
      summary: "Reset password"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
  /auth/users/set_password/:
    post:
      operationId: auth_users_set_password_create
      tags:
      - auth
      summary: "Change Password"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPassword'
        required: true
      security:
      - tokenAuth: []
      - basicAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPassword'
          description: ''
components:
  schemas:
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - token
      - uid
    Collection:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - title
      - updated_at
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
      required:
      - new_password
      - token
      - uid
    PatchedCollection:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedUrl:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        collection:
          type: array
          items:
            type: integer
        url:
          type: string
          format: uri
          maxLength: 200
        title:
          type: string
          nullable: true
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        type:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
      - current_password
      - new_password
    TokenCreate:
      type: object
      properties:
        password:
          type: string
        email:
          type: string
    Url:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        collection:
          type: array
          items:
            type: integer
        url:
          type: string
          format: uri
          maxLength: 200
        title:
          type: string
          nullable: true
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        type:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - collection
      - created_at
      - id
      - updated_at
      - url
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
      required:
      - email
      - id
    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        id:
          type: integer
          readOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - email
      - id
      - password
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
